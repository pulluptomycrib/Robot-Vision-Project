from vis_nav_game import Player, Action, Phase
import pygame
import cv2
import numpy as np
import os
import pickle
from sklearn.neighbors import BallTree

class SemiAutonomousPlayer(Player):
    def __init__(self):
        super(SemiAutonomousPlayer, self).__init__()
        self.fpv = None
        self.screen = None
        self.goal = None
        self.tree = None
        self.path = []
        self.current_step = 0
        self.auto_mode = True  # Enables semi-auto mode
        self.database = None
        self.save_dir = "data/images_subsample/"

        if os.path.exists("VLAD_database.pkl"):
            self.database = pickle.load(open("VLAD_database.pkl", "rb"))
            self.tree = BallTree(self.database, leaf_size=50)

    def reset(self):
        """Reset the player's state."""
        self.fpv = None
        self.screen = None
        self.goal = None
        self.path = []
        self.current_step = 0
        self.auto_mode = True  # Reset to auto mode
        print("Player reset complete.")

    def toggle_auto_mode(self):
        """Toggle between manual and auto mode."""
        self.auto_mode = not self.auto_mode
        print(f"Auto Mode: {'Enabled' if self.auto_mode else 'Disabled'}")

    def act(self):
        """Automatically move forward if in auto mode; otherwise, listen to key inputs."""
        if self.auto_mode:
            if self.fpv is None:  # If no first-person view data, stay idle
                print("Waiting for FPV data...")
                return Action.IDLE
            return Action.FORWARD

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return Action.QUIT

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_a:
                    self.toggle_auto_mode()
                elif event.key == pygame.K_SPACE:
                    return Action.CHECKIN
                elif event.key == pygame.K_LEFT:
                    return Action.LEFT
                elif event.key == pygame.K_RIGHT:
                    return Action.RIGHT
                elif event.key == pygame.K_UP:
                    return Action.FORWARD
                elif event.key == pygame.K_DOWN:
                    return Action.BACKWARD
        return Action.IDLE

    def see(self, fpv):
        """Process first-person view and plan movement."""
        if fpv is None or len(fpv.shape) < 3:
            print("No FPV data received. Skipping frame...")
            return
        self.fpv = fpv

        if self.screen is None:
            h, w, _ = fpv.shape
            self.screen = pygame.display.set_mode((w, h))

        pygame.display.set_caption("SemiAutonomousPlayer:fpv")
        rgb = cv2.cvtColor(fpv, cv2.COLOR_BGR2RGB)
        pygame_img = pygame.image.frombuffer(rgb.tobytes(), (w, h), 'RGB')
        self.screen.blit(pygame_img, (0, 0))
        pygame.display.update()

    def get_neighbor(self, img):
        """Find the closest matching image."""
        q_vlad = np.array(self.compute_vlad(img))
        if q_vlad.size == 0:  # Prevent empty queries
            print("Warning: VLAD feature is empty. Using fallback index 0.")
            return 0
        q_vlad = q_vlad.reshape(1, -1)
        _, index = self.tree.query(q_vlad, 1)
        return index[0][0]

    def compute_vlad(self, img):
        """Compute VLAD descriptor with a fallback for empty results."""
        vlad = np.random.rand(128)  # Placeholder until dataset is available
        if vlad is None or vlad.size == 0:
            print("Warning: VLAD descriptor is empty. Using a zero vector.")
            vlad = np.zeros((1, 128))  # Ensure correct shape
        return vlad.flatten()

if __name__ == "__main__":
    import logging
    logging.basicConfig(filename='vis_nav_player.log', filemode='w', level=logging.INFO,
                        format='%(asctime)s - %(levelname)s: %(message)s', datefmt='%d-%b-%y %H:%M:%S')
    import vis_nav_game as vng
    logging.info(f'player.py is using vis_nav_game {vng.core.__version__}')
    vng.play(the_player=SemiAutonomousPlayer())
